
{
    "name": "ColorMotion Task",
    "nodes": {
        "Color": {
            "function": {
                "name": "Linear Function-5",
                "parameters": {
                    "additive_param": 0.0,
                    "bounds": null,
                    "has_initializers": false,
                    "intercept": 0.0,
                    "multiplicative_param": 0.69,
                    "slope": 0.69
                },
                "type": "Linear"
            },
            "name": "Color",
            "parameters": {
                "execution_count": 0,
                "has_initializers": false,
                "previous_value": "numpy.array([[0.69]])"
            },
            "type": "ProcessingMechanism"
        },
        "Decision": {
            "function": {
                "name": "Drift Diffusion Analytical Function-2",
                "parameters": {
                    "additive_param": 0,
                    "bias": 0.5,
                    "drift_rate": 1.0,
                    "has_initializers": false,
                    "multiplicative_param": 1.0,
                    "noise": 0.5,
                    "starting_point": 0,
                    "t0": 0.2,
                    "threshold": 0.45
                },
                "type": "DriftDiffusionAnalytical"
            },
            "name": "Decision",
            "parameters": {
                "has_initializers": false,
                "initializer": "numpy.array([[0]])",
                "input_format": "SCALAR",
                "previous_value": "numpy.array([[0.45      ]\n [0.81806484]\n [0.87990385]\n [0.12009615]\n [0.81806484]\n [0.22520986]\n [1.92924959]\n [0.81806484]\n [0.22520986]\n [1.92924959]])"
            },
            "type": "DDM"
        },
        "Motion": {
            "function": {
                "name": "Linear Function-10",
                "parameters": {
                    "additive_param": 0.0,
                    "bounds": null,
                    "has_initializers": false,
                    "intercept": 0.0,
                    "multiplicative_param": 0.18,
                    "slope": 0.18
                },
                "type": "Linear"
            },
            "name": "Motion",
            "parameters": {
                "execution_count": 0,
                "has_initializers": false,
                "previous_value": "numpy.array([[-0.1368]])"
            },
            "type": "ProcessingMechanism"
        }
    },
      "projections": {
        "Color to Decision": {
            "function": {
                "name": "LinearMatrix Function-0",
                "parameters": {
                    "bounds": null,
                    "has_initializers": false,
                    "matrix": "numpy.array([[1.]])"
                },
                "type": "LinearMatrix"
            },
            "name": "(ProcessingMechanism Color) to (DDM Decision)",
            "parameters": {
                "exponent": null,
                "has_initializers": true,
                "matrix": "numpy.array([[1.]])",
                "weight": null
            },
            "type": "MappingProjection"
        },
        "Motion to Decision": {
            "function": {
                "name": "LinearMatrix Function-1",
                "parameters": {
                    "bounds": null,
                    "has_initializers": false,
                    "matrix": "numpy.array([[1.]])"
                },
                "type": "LinearMatrix"
            },
            "name": "(ProcessingMechanism Motion) to (DDM Decision)",
            "parameters": {
                "exponent": null,
                "has_initializers": true,
                "matrix": "numpy.array([[1.]])",
                "weight": null
            },
            "type": "MappingProjection"
        }
    },
    "schedulers": {
        "ContextFlags.PROCESSING": {
            "conditions": {
                "node": {
                    "Color": "Always()",
                    "Decision": "Always()",
                    "Motion": "Always()"
                },
                "termination": {
                    "TimeScale.RUN": "Never()",
                    "TimeScale.TRIAL": "AllHaveRun()"
                }
            }
        }
    },
    "type": "Composition"
}